<?xml version="1.0" encoding="utf-8"?>
<mx:Accordion xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="showAccordionHandler(event)" show="showAccordionHandler(event)" width="169" height="559.45" alpha="0.7" borderColor="#C1C1C1">
	
	<mx:Metadata>
		[Event(name="StatOptionSelectedEvent", type="cStatOptionSelectedEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						 KEYWORDS TAB EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Handler called when the keyword goodness radio button has been selected.
			 */
			private function keywordGoodnessRadioButtonChangeHandler(event:Event):void
			{
				disableKeywordOverallProficiencyWeightGUI();
				var e:cStatOptionSelectedEvent = new cStatOptionSelectedEvent("StatOptionSelectedEvent");
				e.mType = e.KEYWORD_GOODNESS;
				e.mTitle = "Keyword Goodness";
				e.mDisplayName = "Keyword Goodness Rating";
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Handler called when the keyword proficiency radio button has been selected.
			 */
			private function keywordProficiencyRadioButtonChangeHandler(event:Event):void
			{
				disableKeywordOverallProficiencyWeightGUI();
				var e:cStatOptionSelectedEvent = new cStatOptionSelectedEvent("StatOptionSelectedEvent");
				e.mType = e.KEYWORD_PROFICIENCY;
				e.mTitle = "Keyword Proficiency";
				e.mDisplayName = "Keyword Proficiency Rating";
				this.dispatchEvent(e);	
			}
			
			/**
			 * 	Handler called when the keyword count radio button has been selected.
			 */
			private function keywordCountRadioButtonChangeHandler(event:Event):void
			{
				disableKeywordOverallProficiencyWeightGUI();
				var e:cStatOptionSelectedEvent = new cStatOptionSelectedEvent("StatOptionSelectedEvent");
				e.mType = e.KEYWORD_COUNT;
				e.mTitle = "Keyword Count";
				e.mDisplayName = "Keyword Count";
				this.dispatchEvent(e);	
			}
			
			/**
			 * 	Handler called when the keyword overall positivity radio button has been selected.
			 */
			private function keywordOverallRadioButtonChangeHandler(event:Event):void
			{
				enableKeywordOverallProficiencyWeightGUI();
				var e:cStatOptionSelectedEvent = new cStatOptionSelectedEvent("StatOptionSelectedEvent");
				e.mType = e.KEYWORD_OVERALL_POSITIVITY;
				e.mTitle = "Keyword Overall Positivity";
				e.mDisplayName = "Keyword Overall Positivity";
				this.dispatchEvent(e);	
			}
			
			/**
			 * 	Handler called when the keyword goodness weight slider handle is moved.
			 */
			private function keywordGoodnessWeightSliderChangeHandler(event:Event):void
			{
				mKeywordGoodnessWeightSlider.value;
			}
			
			/**
			 * 	Handler called when the keyword proficiency weight slider handle is moved.
			 */
			private function keywordProficiencyWeightSliderChangeHandler(event:Event):void
			{
				mKeywordProficiencyWeightSlider.value;
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						 LINKS TAB EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Handler called when the link goodness radio button has been selected.
			 */
			private function linkGoodnessRadioButtonChangeHandler(event:Event):void
			{
				disableLinkOverallProficiencyWeightGUI();
			}
			
			/**
			 * 	Handler called when the link proficiency radio button has been selected.
			 */
			private function linkProficiencyRadioButtonChangeHandler(event:Event):void
			{
				disableLinkOverallProficiencyWeightGUI();	
			}
			
			/**
			 * 	Handler called when the link count radio button has been selected.
			 */
			private function linkCountRadioButtonChangeHandler(event:Event):void
			{
				disableLinkOverallProficiencyWeightGUI();
			}
			
			/**
			 * 	Handler called when the link overall positivity radio button has been selected.
			 */
			private function linkOverallRadioButtonChangeHandler(event:Event):void
			{
				enableLinkOverallProficiencyWeightGUI();
			}
			
			/**
			 * 	Handler called when the link goodness weight slider handle is moved.
			 */
			private function linkGoodnessWeightSliderChangeHandler(event:Event):void
			{
				
			}
			
			/**
			 * 	Handler called when the link proficiency weight slider handle is moved.
			 */
			private function linkProficiencyWeightSliderChangeHandler(event:Event):void
			{
				
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							   MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Enables components which pertain to the keyword overall proficiency rating. 
			 */
			private function enableKeywordOverallProficiencyWeightGUI():void
			{
				mKeywordGoodnessWeightLabel.enabled = true;
				mKeywordProficiencyWeightLabel.enabled = true;
				mKeywordGoodnessWeightSlider.enabled = true;
				mKeywordProficiencyWeightSlider.enabled = true;
			}
			
			/**
			 * 	Disables components which pertain to the keyword overall proficiency rating. 
			 */
			private function disableKeywordOverallProficiencyWeightGUI():void
			{
				mKeywordGoodnessWeightLabel.enabled = false;
				mKeywordProficiencyWeightLabel.enabled = false;
				mKeywordGoodnessWeightSlider.enabled = false;
				mKeywordProficiencyWeightSlider.enabled = false;
			}
			
			/**
			 * 	Enables components which pertain to the link overall proficiency rating. 
			 */
			private function enableLinkOverallProficiencyWeightGUI():void
			{
				
			}
			
			/**
			 * 	Disables components which pertain to the link overall proficiency rating. 
			 */
			private function disableLinkOverallProficiencyWeightGUI():void
			{
				
			}
			
			/**
			 * 	Updates the internal information of this object.
			 */
			public function updateInformation(websites:ArrayCollection,
											  keywords:ArrayCollection):void
			{
				mWebsites = websites;
				mKeywords = keywords;
				
				if(mWebsites != null) {
					if(mWebsites.length == 0) {
						mNoWebsitesAvailableLabel.visible = true;
					}
					else {
						mNoWebsitesAvailableLabel.visible = false;
					}
				}
				
				var websiteEntry:cWebsiteEntry = null;
				var inc:int = 0;
				for(var i:int = 0; i < mWebsites.length; i++) {
					websiteEntry = cWebsiteEntry(mWebsites.getItemAt(i));
					var websiteGraphic:cAccordionWebsiteGraphicCanvas = new cAccordionWebsiteGraphicCanvas();
					//websiteStaticGraphic.addEventListener("cWebsiteStaticLargeGraphicClickedEvent", websiteStaticGraphicClickedHandler);
					websiteGraphic.updateInformation(websiteEntry.mName);
					websiteGraphic.y = inc;
					inc += 28;
					mWebsitesCanvas.addChild(websiteGraphic);	
				}
				
				var keywordEntry:cKeywordEntry = null;
				inc = 0;
				for(i = 0; i < mKeywords.length; i++) {
					keywordEntry = cKeywordEntry(mKeywords.getItemAt(i));
					var keywordGraphic:cAccordionKeywordGraphicCanvas = new cAccordionKeywordGraphicCanvas();
					//websiteStaticGraphic.addEventListener("cWebsiteStaticLargeGraphicClickedEvent", websiteStaticGraphicClickedHandler);
					keywordGraphic.updateInformation(keywordEntry.mName);
					keywordGraphic.y = inc;
					inc += 28;
					mKeywordsSpokenCanvas.addChild(keywordGraphic);	
				}
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						  EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 
			 */
			private function keywordSpokenCanvasShowHandler(event:Event):void
			{
				if(mKeywords != null) {
					if(mKeywords.length == 0) {
						mNoKeywordsAvailableLabel.visible = true;
					}
					else {
						mNoKeywordsAvailableLabel.visible = false;
					}
				}
			}
			
			/**
			 * 
			 */
			private function linksSpokenCanvasShowHandler(event:Event):void
			{
				if(mLinks != null) {
					if(mLinks.length == 0) {
						mNoLinksAvailableLabel.visible = true;
					}
					else {
						mNoLinksAvailableLabel.visible = false;
					}
				}
			}
			
			/**
			 * 
			 */
			private function websiteCanvasShowHandler(event:Event):void
			{
				if(mWebsites != null) {
					if(mWebsites.length == 0) {
						mNoWebsitesAvailableLabel.visible = true;
					}
					else {
						mNoWebsitesAvailableLabel.visible = false;
					}
				}
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   ACCORDION EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 
			 */
			private function showAccordionHandler(event:Event):void
			{
				
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							   DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// community website
			private var mWebsites:ArrayCollection = null;
			// community keywords
			private var mKeywords:ArrayCollection = null;
			// community links
			private var mLinks:ArrayCollection = null;
			
		]]>
	</mx:Script>
	
	<mx:Canvas label="Websites in Community" creationComplete="websiteCanvasShowHandler(event)" show="websiteCanvasShowHandler(event)" width="100%" height="100%" id="mWebsitesCanvas">
		<mx:Label text="No Websites Available" horizontalCenter="0" verticalCenter="-218" id="mNoWebsitesAvailableLabel" toolTip="Perhaps no websites are registered"/>
		</mx:Canvas>
	<mx:Canvas label="Keywords Spoken" width="100%" height="100%" creationComplete="keywordSpokenCanvasShowHandler(event)" show="keywordSpokenCanvasShowHandler(event)" id="mKeywordsSpokenCanvas">
		<mx:Label text="No Keywords Available" horizontalCenter="0" verticalCenter="-218" id="mNoKeywordsAvailableLabel" toolTip="Perhaps no keywords where registered"/>
		</mx:Canvas>
	<mx:Canvas label="Links Spoken" width="100%" height="100%" creationComplete="linksSpokenCanvasShowHandler(event)" show="linksSpokenCanvasShowHandler(event)" backgroundAlpha="1.0" backgroundColor="#FFFFFF" alpha="1.0" id="mLinksSpokenCanvas">
		<mx:Label text="No Links Available" horizontalCenter="0" verticalCenter="-218" id="mNoLinksAvailableLabel" toolTip="Perhaps no links where found"/>
	</mx:Canvas>
	<mx:Canvas label="Graph Controls" width="100%" height="100%" alpha="1.0" backgroundColor="#D1D1D1" backgroundAlpha="1.0" borderStyle="solid" themeColor="#E41313" color="#DD0A0A" cornerRadius="0" id="mGraphControlsCanvas">
		<mx:RadioButton x="10" y="5" change="keywordGoodnessRadioButtonChangeHandler(event)" label="Goodness" color="#0B333C" borderColor="#000000" selected="true" id="mKeywordGoodnessRB"/>
		<mx:RadioButton x="10" y="23" change="keywordProficiencyRadioButtonChangeHandler(event)" label="Proficiency" color="#0B333C" borderColor="#000000" id="mKeywordProficiencyRB"/>
		<mx:RadioButton x="10" y="41" change="keywordCountRadioButtonChangeHandler(event)" label="Count" color="#0B333C" borderColor="#000000" id="mKeywordCountRB"/>
		<mx:RadioButton x="10" y="68" change="keywordOverallRadioButtonChangeHandler(event)" label="Overall Positivity" color="#0B333C" borderColor="#000000" id="mKeywordOverallRB"/>
		<mx:HSlider x="10" y="111" change="keywordGoodnessWeightSliderChangeHandler(event)" borderColor="#000000" width="149" minimum="0" maximum="1" allowTrackClick="true" liveDragging="true" value="1" enabled="false" id="mKeywordGoodnessWeightSlider"/>
		<mx:HSlider x="10" y="151" change="keywordProficiencyWeightSliderChangeHandler(event)" borderColor="#000000" width="149" allowTrackClick="true" minimum="0" maximum="1" liveDragging="true" value="1" enabled="false" id="mKeywordProficiencyWeightSlider"/>
		<mx:Label x="10" y="93" text="Goodness Weight" textDecoration="underline" color="#0B333C" enabled="false" id="mKeywordGoodnessWeightLabel"/>
		<mx:Label x="10" y="131" text="English Proficiency Weight" textDecoration="underline" color="#0B333C" enabled="false" id="mKeywordProficiencyWeightLabel"/>
	</mx:Canvas>
	
</mx:Accordion>
