<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler(event)" show="showCanvasHandler(event)" width="1013" height="615" xmlns:ns1="*" backgroundColor="#FFFFFF" backgroundAlpha="0.2">

	<mx:Metadata>
		[Event(name="OpenCommunityGroupSelectionClickedEvent", type="flash.events.Event")]
		[Event(name="OpenCommunityGroupHomeCanvasEvent", type="flash.events.Event")]
		[Event(name="OpenAdditionalWebsiteInformationEvent", type="cAccordionWebsiteGraphicEvent")]
		[Event(name="OpenCommunityGroupEditorCanvasEvent", type="cCommunityGroupEditorEvent")]
		[Event(name="FetchWebsiteAnalytics", type="cWebsiteGraphicClickedEvent")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.events.TweenEvent;
			import mx.effects.Fade;
			import mx.effects.Move;
			import mx.effects.Tween;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////

			/**
			 * 	Called when the user clicks the edit community group button.
			 */
			private function editCommunityGroupButtonClickHandler(event:Event):void
			{
				var e:cCommunityGroupEditorEvent = new cCommunityGroupEditorEvent("OpenCommunityGroupEditorCanvasEvent");
				e.mCommuniutyGroupName = mCommunityGroupNameLabel.text;
				e.mWebsites = mWebsites;
				e.mKeywords = mKeywords;
				this.dispatchEvent(e);
			}

			/**
			 * 	Called when the user clicks on the home label.
			 */
			private function homeLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupHomeCanvasEvent");
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Called when the user hovers the mouse over the home label.
			 */
			private function homeLabelRollOverHandler(event:Event):void
			{
				mHomeLabel.setStyle("color", "0xFF6666");
			}
			
			/**
			 * 	Called when the user hovers the mouse away from the home label.
			 */
			private function homeLabelRollOutHandler(event:Event):void
			{
				mHomeLabel.setStyle("color", "0x11d30c");
			}
			
			/**
			 * 	Called when the user clicks on the community label.
			 */
			private function communityLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupSelectionClickedEvent");
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Called when the user hovers the mouse over the community label.
			 */
			private function communityLabelRollOverHandler(event:Event):void
			{
				mCommunityGroupLabel.setStyle("color", "0xFF6666");
			}
			
			/**
			 * 	Called when the user hovers the mouse away from the community label.
			 */
			private function communityLabelRollOutHandler(event:Event):void
			{
				mCommunityGroupLabel.setStyle("color", "0x11d30c");
			}
			
			/**
			 *  
			 */
			 private function lineChartCanvasCreateHandler(event:Event):void
			 {
			 	//mLineChartCanvas.updateInformation(mAnalyticsParser, null);
			 }
			 
			 /**
			 * 
			 */
			private function _1YearTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				
			}
			
			/**
			 * 
			 */
			private function _9MonthsTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				
			}
			
			/**
			 * 
			 */
			private function _6MonthsTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				
			}
			
			/**
			 * 
			 */
			private function _1MonthTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				
			}
			
			/**
			 * 
			 */
			private function _2WeeksTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				//mStatOptionSelected.mTimeSpan = mStatOptionSelected.TIME_SPAN_2_WEEKS;
				//mLineChartCanvas.updateInformation(mAnalyticsParser, mStatOptionSelected);
			}
			
			/**
			 * 
			 */
			private function _1WeekTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				//mStatOptionSelected.mTimeSpan = mStatOptionSelected.TIME_SPAN_1_WEEK;
				//mLineChartCanvas.updateInformation(mAnalyticsParser, mStatOptionSelected);
			}
			 
			 /**
			 * 	Event handler which listens to the cStatOptionsAccordion object events.
			 */
			private function statOptionSelectedHandler(event:cStatOptionSelectedEvent):void
			{
				// check which time frame to use
				var timeSpan:int = event.TIME_SPAN_1_YEAR;
				if(m1WeekSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_1_WEEK;
				}
				else if(m2WeeksTimeSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_2_WEEKS;
				}
				else if(m1MonthTimeSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_1_MONTH;
				}
				else if(m6MonthsTimeSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_6_MONTHS;
				}
				else if(m9MonthsTimeSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_9_MONTHS;
				}
				event.mTimeSpan = timeSpan;
				// update the line Chart Canvas
				//mLineChartCanvas.updateInformation(mAnalyticsParser, event);
				//mStatOptionSelected = event;
			}
			
			/**
			 *  Called when the user has requested an event from the website graphic within the accoridion 
			 * 	component.
			 */
			private function accordionWebsiteGraphicEventHandler(event:cAccordionWebsiteGraphicEvent):void
			{
				if(event.mType == event.OPEN_ADDITIONAL_INFORMATION) {
					var e:cAccordionWebsiteGraphicEvent = new cAccordionWebsiteGraphicEvent("OpenAdditionalWebsiteInformationEvent");
					e.mWebsiteName = event.mWebsiteName;
					e.mCommuniutyGroupName = mCommunityGroupNameLabel.text;
					this.dispatchEvent(e);
				}
				else if(event.mType == event.WEBSITE_CHECKED) {
					var e1:cWebsiteGraphicClickedEvent = new cWebsiteGraphicClickedEvent("FetchWebsiteAnalytics");
					e1.mWebsiteName = event.mWebsiteName;
					e1.mCommGroupId = mCommGroupId;
					this.dispatchEvent(e1);
				}
				else if(event.mType == event.WEBSITE_UNCHECKED) {
					Alert.show("UnChecked");
				}
			}
			
			/**
			 * 
			 */
			private function countWeightSliderChangeHandler(event:Event):void
			{
				mCountInfoLabel.text = mCountWeightSlider.value.toString().slice(0, 5);
			}
			
			/**
			 * 
			 */
			private function goodnessWeightSliderChangeHandler(event:Event):void
			{
				mGoodnessInfoLabel.text = mGoodnessWeightSlider.value.toString().slice(0, 5);
			}
			
			/**
			 * 
			 */
			private function proficiencyWeightSliderChangeHandler(event:Event):void
			{
				mEnglishProficiencyInfoLabel.text = mEnglishProficiencyWeightSlider.value.toString().slice(0, 5);
			}
			
			/**
			 * 
			 */
			private function presetsComboBoxChangeHandler(event:Event):void
			{
				if(mPresetsComboBox.selectedItem.toString() == "Count") {
					mCountWeightSlider.value = 1;
					mGoodnessWeightSlider.value = 0;
					mEnglishProficiencyWeightSlider.value = 0;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Goodness") {
					mCountWeightSlider.value = 0;
					mGoodnessWeightSlider.value = 1;
					mEnglishProficiencyWeightSlider.value = 0;
				}
				if(mPresetsComboBox.selectedItem.toString() == "English Prof.") {
					mCountWeightSlider.value = 0;
					mGoodnessWeightSlider.value = 0;
					mEnglishProficiencyWeightSlider.value = 1;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Count + Goodness") {
					mCountWeightSlider.value = 1;
					mGoodnessWeightSlider.value = 1;
					mEnglishProficiencyWeightSlider.value = 0;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Count + English Prof.") {
					mCountWeightSlider.value = 1;
					mGoodnessWeightSlider.value = 0;
					mEnglishProficiencyWeightSlider.value = 1;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Goodness + English Prof.") {
					mCountWeightSlider.value = 0;
					mGoodnessWeightSlider.value = 1;
					mEnglishProficiencyWeightSlider.value = 1;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Show All") {
					mCountWeightSlider.value = 1;
					mGoodnessWeightSlider.value = 1;
					mEnglishProficiencyWeightSlider.value = 1;
				}
				
				mCountInfoLabel.text = mCountWeightSlider.value.toString().slice(0, 5);
				mGoodnessInfoLabel.text = mGoodnessWeightSlider.value.toString().slice(0, 5);
				mEnglishProficiencyInfoLabel.text = mEnglishProficiencyWeightSlider.value.toString().slice(0, 5);
			}
			 
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Updates the internal information of this object.
			 */
			public function updateInformation(commGroupName:String,
										      commGroupId:int,
										      creator:String,
										      dateCreated:String,
									     	  websites:ArrayCollection,
									     	  keywords:ArrayCollection):void
			{
				if(mCommGroupId != commGroupId) {
					mCommunityParserCollection.removeAll();
				}
				
				mCommGroupName = commGroupName;
				mCommGroupId = commGroupId;
				mCreator = creator;
				mDateCreated = dateCreated;
				mWebsites = websites;
				mKeywords = keywords;
			}
			
			/**
			 *	update the analytics information - called when new website statistics have been
			 * 	fetched. 
			 */
			public function updateAnalyticsInformation(analyticsParser:cAnalyticsParser):void
			{
				mCommunityParserCollection.addItem(analyticsParser);
				// 1. compute averages
				// 2. update graphs
				
				var event:cStatOptionSelectedEvent = new cStatOptionSelectedEvent("d");
				
				var timeSpan:int = event.TIME_SPAN_1_YEAR;
				if(m1WeekSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_1_WEEK;
				}
				else if(m2WeeksTimeSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_2_WEEKS;
				}
				else if(m1MonthTimeSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_1_MONTH;
				}
				else if(m6MonthsTimeSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_6_MONTHS;
				}
				else if(m9MonthsTimeSpanRadioButton.selected) {
					timeSpan = event.TIME_SPAN_9_MONTHS;
				}
				event.mTimeSpan = timeSpan;
				
				//event.mCountWeight = mCountWeightSlider.value;
				//event.mGoodnessWeight = mGoodnessWeightSlider.value;
				//event.mEnglishProficiency = mEnglishProficiencyWeightSlider.value;
				
				event.mCountWeight = 0;
				event.mGoodnessWeight = 0;
				event.mEnglishProficiency = 1;
				
				mLineChartCanvas.updateInformation(analyticsParser, event);
				
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * Called when the canvas is created.
			 */
			private function creationCompleteHandler(event:Event):void
			{
				if(mCommGroupName.length == 0) {
					mCommunityGroupNameLabel.text = "[Community Group Name Not Available]";
				}
				else {
					mCommunityGroupNameLabel.text = mCommGroupName;
				}
				
				mCountWeightSlider.value = 1;
				mGoodnessWeightSlider.value = 0;
				mEnglishProficiencyWeightSlider.value = 0;
				mCountInfoLabel.text = mCountWeightSlider.value.toString().slice(0, 5);
				mGoodnessInfoLabel.text = mGoodnessWeightSlider.value.toString().slice(0, 5);
				mEnglishProficiencyInfoLabel.text = mEnglishProficiencyWeightSlider.value.toString().slice(0, 5);
			}
			
			/**
			 * 	Called when the canvas is shown.
			 */
			private function showCanvasHandler(event:Event):void
			{
				if(mCommGroupName.length == 0) {
					mCommunityGroupNameLabel.text = "[Community Group Name Not Available]";
				}
				else {
					mCommunityGroupNameLabel.text = mCommGroupName;
				}
				mStatOptionAccordion.updateInformation(mWebsites, mKeywords);
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// community group name
			private var mCommGroupName:String = "";
			// community group id
			private var mCommGroupId:int = 0;
			// creator of the community
			private var mCreator:String = "";
			// date community group was created
			private var mDateCreated:String = "";
			// websites for the community
			private var mWebsites:ArrayCollection = null;
			// keywords for the community
			private var mKeywords:ArrayCollection = null;
			// collection of website parsers for a community
			private var mCommunityParserCollection:ArrayCollection = new ArrayCollection();
			
		]]>
	</mx:Script>

	<mx:Label click="homeLabelClickHandler(event)" rollOver="homeLabelRollOverHandler(event)" rollOut="homeLabelRollOutHandler(event)" text="Home &gt;&gt;" color="#11D30C" fontSize="14" textDecoration="normal" id="mHomeLabel"  verticalCenter="-292" horizontalCenter="-461"/>
	<mx:Label click="communityLabelClickHandler(event)" rollOver="communityLabelRollOverHandler(event)" rollOut="communityLabelRollOutHandler(event)" text="My Community Groups &gt;&gt;" color="#11D30C" fontSize="14" textDecoration="normal" id="mCommunityGroupLabel"  horizontalCenter="-323" verticalCenter="-292"/>
	<mx:ViewStack x="187" y="45.55" id="mStatGraphicsViewStack" width="815" height="529.45">
		<ns1:cLineChartCanvas x="1" y="2" id="mLineChartCanvas" creationComplete="lineChartCanvasCreateHandler(event)">
		</ns1:cLineChartCanvas>
	</mx:ViewStack>
	<mx:Label text="Some Community Group Name" fontSize="24" color="#DFDFDF" width="450" textAlign="left" id="mCommunityGroupNameLabel" horizontalCenter="3" verticalCenter="-292"/>
	<mx:RadioButton label="1 Year" color="#DDDDDD" change="_1YearTimeSpanRadioButtonChangeHandler(event)" id="m1YearTimeSpanRadioButton" horizontalCenter="62" verticalCenter="286"/>
	<mx:RadioButton label="9 Months" color="#DDDDDD" change="_9MonthsTimeSpanRadioButtonChangeHandler(event)" id="m9MonthsTimeSpanRadioButton" verticalCenter="286" horizontalCenter="138"/>
	<mx:RadioButton label="6 Months" color="#DDDDDD" change="_6MonthsTimeSpanRadioButtonChangeHandler(event)" id="m6MonthsTimeSpanRadioButton" verticalCenter="286" horizontalCenter="222"/>
	<mx:RadioButton label="1 Month" color="#DDDDDD" change="_1MonthTimeSpanRadioButtonChangeHandler(event)" id="m1MonthTimeSpanRadioButton" verticalCenter="286" horizontalCenter="303"/>
	<mx:RadioButton label="2 Weeks" color="#DDDDDD" change="_2WeeksTimeSpanRadioButtonChangeHandler(event)" id="m2WeeksTimeSpanRadioButton" verticalCenter="286" horizontalCenter="383"/>
	<mx:RadioButton label="1 Week" selected="true" color="#DDDDDD" change="_1WeekTimeSpanRadioButtonChangeHandler(event)" id="m1WeekSpanRadioButton" verticalCenter="286" horizontalCenter="462"/>
	<ns1:cStatOptionsAccordion id="mStatOptionAccordion"
							   StatOptionSelectedEvent="statOptionSelectedHandler(event)" 
							   AccordionWebsiteGraphicEvent="accordionWebsiteGraphicEventHandler(event)"
							   height="378.45" horizontalCenter="-412" verticalCenter="-74">
	</ns1:cStatOptionsAccordion>
	<mx:HRule width="993" height="14.56" verticalCenter="-277" horizontalCenter="0" alpha="0.5"/>
	<mx:Button label="Add Website" color="#D8D8D8" alpha="0.5" id="mAddWebsiteButton" horizontalCenter="447" verticalCenter="-293" fontWeight="bold" cornerRadius="5"/>
	<mx:Button label="Edit Community Group" color="#D8D8D8" click="editCommunityGroupButtonClickHandler(event)" alpha="0.5" id="mEditCommunityGroupButton" horizontalCenter="313" verticalCenter="-293" fontWeight="bold" fontStyle="normal" cornerRadius="5"/>
	<mx:HSlider x="19" y="507" change="countWeightSliderChangeHandler(event)" borderColor="#000000" width="149" minimum="0" maximum="1" allowTrackClick="true" liveDragging="true" value="1" enabled="true" id="mCountWeightSlider"/>
	<mx:HSlider x="19" y="587" change="goodnessWeightSliderChangeHandler(event)" borderColor="#000000" width="149" minimum="0" maximum="1" allowTrackClick="true" liveDragging="true" value="1" enabled="true" id="mGoodnessWeightSlider"/>
	<mx:HSlider x="19" y="547" change="proficiencyWeightSliderChangeHandler(event)" borderColor="#000000" width="149" allowTrackClick="true" minimum="0" maximum="1" liveDragging="true" value="1" enabled="true" id="mEnglishProficiencyWeightSlider"/>
	<mx:Label x="19" y="493" text="Count :" textDecoration="normal" color="#D4D4D4" enabled="true" id="mCountWeightLabel"/>
	<mx:Label x="19" y="533" text="Goodness :" textDecoration="normal" color="#D4D4D4" enabled="true" id="mGoodnessWeightLabel"/>
	<mx:Label x="19" y="573" text="English Proficiency :" textDecoration="normal" color="#D4D4D4" enabled="true" id="mProficiencyWeightLabel0"/>
	<mx:Label x="10" y="476" text="Weights" color="#D4D4D4" textDecoration="underline"/>
	<mx:Label x="10" y="430.45" text="Presets" color="#D4D4D4" textDecoration="underline"/>
	<mx:ComboBox id="mPresetsComboBox" change="presetsComboBoxChangeHandler(event)" x="10" y="451" width="169" maxWidth="160">
	<mx:ArrayCollection>
         <mx:String>Count</mx:String>
         <mx:String>Goodness</mx:String>
         <mx:String>English Prof.</mx:String>
         <mx:String>Count + Goodness</mx:String>
         <mx:String>Count + English Prof.</mx:String>
         <mx:String>Goodness + English Prof.</mx:String>
         <mx:String>Show All</mx:String>
      </mx:ArrayCollection>
	</mx:ComboBox>
	<mx:Label x="128" y="493" text="Label" color="#41CD0A" textAlign="right" id="mCountInfoLabel" width="40" selectable="false"/>
	<mx:Label x="133" y="573" text="Label" color="#41CD0A" textAlign="right" id="mGoodnessInfoLabel"/>
	<mx:Label x="133" y="533" text="Label" color="#41CD0A" textAlign="right" id="mEnglishProficiencyInfoLabel"/>
	<mx:Button x="187" y="583" label="Zoom In" color="#D4D4D4"/>
	<mx:Button x="269" y="583" label="Zoom Out" color="#D4D4D4"/>
	
</mx:Canvas>
