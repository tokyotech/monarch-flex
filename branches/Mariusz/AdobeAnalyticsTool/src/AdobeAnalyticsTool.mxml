<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler(event)" close="closeHandler(event)" layout="absolute" width="1030" height="700" title="Adobe Community Analytics" minHeight="710" minWidth="1035" maxHeight="710" maxWidth="1035" showGripper="false" backgroundImage="@Embed(source='../images/background.jpg')" borderColor="#3C3C3C" backgroundGradientAlphas="[1.0, 1.0]" color="#5D5D5D" backgroundGradientColors="[#D7D7D7, #515151]" alpha="0.93" backgroundColor="#000000" cornerRadius="12" xmlns:local="*">
	
	<mx:Script>
		<![CDATA[
			import mx.controls.ProgressBar;
			import mx.collections.ArrayCollection;		
			import mx.controls.Alert;
			
			// hold user account information
			private var mAccountInformation:cAccountInformation = null;
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							GUI EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Event handler which listens to the sign in window events.
			 */
			private function signInWindowCloseHandler(event:cSignInEvent):void
			{
				if(event.mType == event.SIGN_IN) {
					mEngine.loginToAccount(event.mUserName, event.mPassword);
					mLoader.visible = true;
	            	mLoader.play();
				}
				this.enabled = true;
			}
			
			/**
			 * 	Event handler which listens to the create account window events.
			 */
			private function createAccountWindowCloseHandler(event:cCreateAccountEvent):void
			{
				if(event.mType == event.CREATE_ACCOUNT) {
					mEngine.createAccount(event.mFullName, event.mUserName, event.mPassword);
					mLoader.visible = true;
	            	mLoader.play();
				}
				this.enabled = true;
			}
			
			/**
			 * 	Function which lanuches a sign in window.
			 */
			private function signInClickHandler(event:Event):void
			{
				var signInWindow:cSignInWindow = new cSignInWindow();
				signInWindow.open(true);
				signInWindow.nativeWindow.x = nativeWindow.x + (nativeWindow.width - signInWindow.nativeWindow.width) / 2;
				signInWindow.nativeWindow.y = nativeWindow.y + (nativeWindow.height - signInWindow.nativeWindow.height) / 2;
				signInWindow.addEventListener("cSignInEvent", signInWindowCloseHandler);
				signInWindow.alwaysInFront = true;
				this.enabled = false;
			}
			
			/**
			 * 	Called when the user hovers the mouse over the sign in label.
			 */
			private function signInRollOverHandler(event:Event):void
			{
				mSignInLabel.setStyle("color", "0xFF6666");
			}
			
			/**
			 * 	Called when the user hovers the mouse away from the sign in label.
			 */
			private function signInRollOutHandler(event:Event):void
			{
				mSignInLabel.setStyle("color", "0x11d30c");
			}
			
			/**
			 * 	Called when the user hovers the mouse over the sign out label.
			 */
			private function signOutRollOverHandler(event:Event):void
			{
				mSignOutLabel.setStyle("color", "0xFF6666");
			}
			
			/**
			 * 	Called when the user hovers the mouse away from the sign out label.
			 */
			private function signOutRollOutHandler(event:Event):void
			{
				mSignOutLabel.setStyle("color", "0x11d30c");
			}
			
			/**
			 * 	Called when the user hovers the mouse over the create account label.
			 */
			private function createAccountRollOverHandler(event:Event):void
			{
				mCreateAccountLabel.setStyle("color", "0xFF6666");
			}
			
			/**
			 * 	Called when the user hovers the mouse away from the sign out label.
			 */
			private function createAccountRollOutHandler(event:Event):void
			{
				mCreateAccountLabel.setStyle("color", "0x11d30c");
			}
			
			/**
			 * 	Function which lanuches a sign out window.
			 */
			private function signOutClickHandler(event:Event):void
			{
				mSignInLabel.visible = true;
				mSignOutLabel.visible = false;
				mFullNameSeparator.visible = false;
				mUserNameLabel.text = "";
				mMainViewStack.selectedIndex = 0;
				Alert.show("You successfully logged out of your account.", "Log Out Successful");
			}
			
			/**
			 * 	Function which launches a create account window.
			 */
			private function createAccountClickHandler(event:Event):void
			{
				var createAccountWindow:cCreateAccountWindow = new cCreateAccountWindow();
				createAccountWindow.open(true);
				createAccountWindow.nativeWindow.x = nativeWindow.x + (nativeWindow.width - createAccountWindow.nativeWindow.width) / 2;
				createAccountWindow.nativeWindow.y = nativeWindow.y + (nativeWindow.height - createAccountWindow.nativeWindow.height) / 2;
				createAccountWindow.addEventListener("cCreateAccountEvent", createAccountWindowCloseHandler);
				createAccountWindow.alwaysInFront = true;
				this.enabled = false;
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							CHILD CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Detects that a community group should be created. It will call the engine object 
			 *  to service the request.
			 */
			private function createCommunityGroupEventHandler(event:cCreateCommunityGroupEvent):void
			{
				mEngine.createCommunity(event.mCommName, event.mKeywords, mAccountInformation.mUserId);
				
				mLoader.visible = true;
	            mLoader.play();
			}
			
			/**
			 * 	Detects that website statistics data should be fetched from the server. It requests
			 *  this through the engine.
			 */
			private function requestWebsiteStatHandler(event:cWebsiteGraphicClickedEvent):void
			{
				mEngine.getAnalytics(event.mCommGroupId, event.mWebsiteName);
				
				mLoader.visible = true;
            	mLoader.play();
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							ENGINE EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Event handler which signals to the main window that the engine has recieved
			 *  a logged in response from the server.
			 */
			private function loggedInServiceHandler(event:cLoggedinEvent):void
			{
				loggedInMainCanvasInformationUpdate(event.mFullName,
													event.mUserName,
													event.mPassword,
													event.mUserId,
													event.mCommunities);
				mLoggedInCanvas.updateInformation(mAccountInformation);
				mMainViewStack.selectedIndex = 1;
				
	            mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 *  Event handler which signals to the main window that the engine has recieved
			 *  an account created response from the server.
			 */
			private function accountCreatedServiceHandler(event:cLoggedinEvent):void
			{
				loggedInMainCanvasInformationUpdate(event.mFullName,
													event.mUserName,
													event.mPassword,
													event.mUserId,
													event.mCommunities);
				mLoggedInCanvas.updateInformation(mAccountInformation);
				mMainViewStack.selectedIndex = 1; 
				mLoggedInCanvas.openMyCommHomeCanvas();
				
				mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 *	Event handler which signals to the main window that the engine has recieved
			 *  a newly created community group response from the server.
			 */
			private function newCommunityCreatedServiceHandler(event:cNewCommunityEvent):void
			{
				mAccountInformation.mCommunities.addItemAt(event.mCommunityGroupEntry, 0);
				mLoggedInCanvas.updateInformation(mAccountInformation);
				mLoggedInCanvas.openMyCommHomeCanvas();
				
				mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 * 	Event handler which signals to the main window that the engine has recieved
			 *  website statitics data.
			 */
			private function analyticsReadyHandler(event:cAnalysisDataReadyEvent):void
			{
				mLoggedInCanvas.openWebsiteStatsBrowserCanvas(event.mAnalysisParser);
				
				mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 * 	Event handler called to signal that a request to the engine has failed.
			 */
			private function failedServiceHandler(event:Event):void
			{
				mLoader.stop();
				mLoader.visible = false;
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							WINDOW EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Event handler triggered when the main window first opens.
			 */
			private function creationCompleteHandler(event:Event):void
			{
				var screenBounds:Rectangle = Screen.mainScreen.bounds;
                nativeWindow.x = (screenBounds.width - nativeWindow.width) / 2;
                nativeWindow.y = (screenBounds.height - nativeWindow.height) / 2;
                
                mLoader.visible = false;
                mLoader.x = (nativeWindow.width - mLoader.width) / 2;
				mLoader.y = (nativeWindow.height - mLoader.height) / 2;
                this.addChild(mLoader);   
			}
			
			/**
			 * 	Event handler triggered when the main window is about to close.
			 */
			private function closeHandler(event:Event):void
			{
				
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 
			 */
			private function loggedInMainCanvasInformationUpdate(fullName:String,
													   			 userName:String,
													   			 password:String,
													   			 userId:int,
													   			 communities:ArrayCollection):void
			{
				mSignInLabel.visible = false;
				mSignOutLabel.visible = true;
				mFullNameSeparator.visible = true;
				mUserNameLabel.text = "WELCOME " + fullName
				mAccountInformation = new cAccountInformation(fullName,
															  userName,
															  password,
															  userId,
															  communities);
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			private var mLoader:cLoadingIndicator = new cLoadingIndicator();
			
		]]>
	</mx:Script>
	
	<mx:HRule x="10" y="60" width="1013" height="7" strokeColor="#606060" id="mHRule1"/>
	<mx:Text x="10" y="10" text="ADOBE&#xd;" fontSize="20" color="#F70202" textAlign="center" fontWeight="bold" fontFamily="Verdana" width="87" id="mADOBEText"/>
	<mx:Text x="10" y="34" text="Community Analytics" fontSize="12" color="#1C94B2" id="mCommunityAnalyticsText"/>
	<mx:Label x="974" y="5" text="Sign In" rollOver="signInRollOverHandler(event)" rollOut="signInRollOutHandler(event)" click="signInClickHandler(event)" id="mSignInLabel" color="#0CE10C" fontSize="12" textDecoration="underline"/>
	<mx:Label x="970" y="5" text="Sign Out" rollOver="signOutRollOverHandler(event)" rollOut="signOutRollOutHandler(event)" click="signOutClickHandler(event)" id="mSignOutLabel" color="#0CE10C" fontSize="12" textDecoration="underline" visible="false"/>
	<mx:Label text="Create Account" rollOver="createAccountRollOverHandler(event)" rollOut="createAccountRollOutHandler(event)" click="createAccountClickHandler(event)" id="mCreateAccountLabel" color="#0CE10C" fontSize="12" textDecoration="underline" x="848" y="5"/>
	<mx:TextInput x="762" y="34" width="212" text="Search..." id="mSearchTextBox"/>
	<mx:Button x="982" y="34" label="Go" color="#ECECEC"/>
	<mx:ViewStack x="10" y="63" id="mMainViewStack" width="1013" height="625">
		<local:cLoggedOutCanvas backgroundColor="#FFFFFF" id="mLoggedOutCanvas">
		</local:cLoggedOutCanvas>
		<local:cLoggedInCanvas id="mLoggedInCanvas" RequestWebsiteStatsEvent="requestWebsiteStatHandler(event)" CreateCommunityGroupEvent="createCommunityGroupEventHandler(event)">
		</local:cLoggedInCanvas>
	</mx:ViewStack>
	<mx:VRule x="960" y="6" width="3" height="16"/>
	<mx:VRule x="832" y="7" width="3" height="16" id="mFullNameSeparator" visible="false"/>
	<local:cEngine id="mEngine" LoggedInCreatedEvent="loggedInServiceHandler(event)"
							 	AccountCreatedEvent="accountCreatedServiceHandler(event)"
							 	NewCommunityCreatedEvent="newCommunityCreatedServiceHandler(event)"
							  	AnalyticsReadyEvent="analyticsReadyHandler(event)"
							  	FailedEvent="failedServiceHandler(event)">
	</local:cEngine>
	<mx:Label x="383" y="5" fontSize="12" textAlign="right" width="442" color="#D1C613" id="mUserNameLabel"/>
</mx:WindowedApplication>
