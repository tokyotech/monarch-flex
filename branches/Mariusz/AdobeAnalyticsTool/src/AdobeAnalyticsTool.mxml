<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler(event)" close="closeHandler(event)" layout="absolute" width="1040" height="710" title="Adobe Community Analytics" showGripper="false" backgroundImage="@Embed(source='../images/background.jpg')" borderColor="#3C3C3C" backgroundGradientAlphas="[1.0, 1.0]" color="#5D5D5D" backgroundGradientColors="[#D7D7D7, #515151]" alpha="0.93" backgroundColor="#000000" cornerRadius="12" xmlns:local="*">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;		
			import mx.controls.Alert;
			import air.net.URLMonitor;
	
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							GUI EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Event handler which listens to the sign in window events.
			 */
			private function signInWindowCloseHandler(event:cSignInEvent):void
			{
				if(event.mType == event.SIGN_IN) {
					mEngine.loginToAccount(event.mUserName, event.mPassword);
					mLoader.visible = true;
	            	mLoader.play();
				}
				this.enabled = true;
			}
			
			/**
			 * 	Event handler which listens to the create account window events.
			 */
			private function createAccountWindowCloseHandler(event:cCreateAccountEvent):void
			{
				if(event.mType == event.CREATE_ACCOUNT) {
					mEngine.createAccount(event.mFullName, event.mUserName, event.mPassword);
					mLoader.visible = true;
	            	mLoader.play();
				}
				this.enabled = true;
			}
			
			/**
			 * 	Function which lanuches a sign in window.
			 */
			private function signInClickHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					var signInWindow:cSignInWindow = new cSignInWindow();
					signInWindow.open(true);
					signInWindow.nativeWindow.x = nativeWindow.x + (nativeWindow.width - signInWindow.nativeWindow.width) / 2;
					signInWindow.nativeWindow.y = nativeWindow.y + (nativeWindow.height - signInWindow.nativeWindow.height) / 2;
					signInWindow.addEventListener("cSignInEvent", signInWindowCloseHandler);
					signInWindow.alwaysInFront = true;
					this.enabled = false;
				}
			}
			
			/**
			 * 	Event handler which listens to the create website window events.
			 */
			private function createWebsiteWindowCloseHandler(event:cCreateWebsiteEvent):void
			{
				if(event.mType == event.CREATE_WEBSITE) {			
					mEngine.insertWebsite(mAccountInformation.mSelectedCommunityId, 
										  mAccountInformation.mUserId,
										  event.mWebsiteName,
										  event.mWebsiteURL,
										  event.mWebsiteType);
					mLoader.visible = true;
	            	mLoader.play();
				}
				this.enabled = true;
			}
			
			/**
			 * 	Detects a request to launch the website creator window.
			 */
			private function openWebsiteCreatorWindowHandler(event:cCreateWebsiteEvent):void
			{
				mAccountInformation.mSelectedCommunityId = event.mCommunityGroupId;		
				var websiteCreatorWindow:cCreateWebsiteWindow = new cCreateWebsiteWindow();
				websiteCreatorWindow.open(true);
				websiteCreatorWindow.nativeWindow.x = nativeWindow.x + (nativeWindow.width - websiteCreatorWindow.nativeWindow.width) / 2;
				websiteCreatorWindow.nativeWindow.y = nativeWindow.y + (nativeWindow.height - websiteCreatorWindow.nativeWindow.height) / 2;
				websiteCreatorWindow.addEventListener("cCreateWebsiteEvent", createWebsiteWindowCloseHandler);
				websiteCreatorWindow.alwaysInFront = true;
				this.enabled = false;
			}
			
			/**
			 * 	Called when the user hovers the mouse over the sign in label.
			 */
			private function signInRollOverHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					mSignInLabel.setStyle("color", "0xFF6666");
				}
			}
			
			/**
			 * 	Called when the user hovers the mouse away from the sign in label.
			 */
			private function signInRollOutHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					mSignInLabel.setStyle("color", "0x11d30c");
				}
			}
			
			/**
			 * 	Called when the user hovers the mouse over the sign out label.
			 */
			private function signOutRollOverHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					mSignOutButton.setStyle("color", "0xFF6666");
				}
			}
			
			/**
			 * 	Called when the user hovers the mouse away from the sign out label.
			 */
			private function signOutRollOutHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					mSignOutButton.setStyle("color", "0x11d30c");
				}
			}
			
			/**
			 * 	Called when the user hovers the mouse over the create account label.
			 */
			private function createAccountRollOverHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					mCreateAccountButton.setStyle("color", "0xFF6666");
				}
			}
			
			/**
			 * 	Called when the user hovers the mouse away from the sign out label.
			 */
			private function createAccountRollOutHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					mCreateAccountButton.setStyle("color", "0x11d30c");
				}
			}
			
			/**
			 * 	Function which lanuches a sign out window.
			 */
			private function signOutClickHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					mSignInLabel.visible = true;
					mSignOutButton.visible = false;
					mSeparator2.visible = true;
					mCreateAccountButton.visible = true;
					mUserNameLabel.text = "";
					mMainViewStack.selectedIndex = 0;
					Alert.show("You successfully logged out of your account.", "Log Out Successful");
				}	
			}
			
			/**
			 * 	Function which launches a create account window.
			 */
			private function createAccountClickHandler(event:Event):void
			{
				if(mConnectedToInternet) {
					var createAccountWindow:cCreateAccountWindow = new cCreateAccountWindow();
					createAccountWindow.open(true);
					createAccountWindow.nativeWindow.x = nativeWindow.x + (nativeWindow.width - createAccountWindow.nativeWindow.width) / 2;
					createAccountWindow.nativeWindow.y = nativeWindow.y + (nativeWindow.height - createAccountWindow.nativeWindow.height) / 2;
					createAccountWindow.addEventListener("cCreateAccountEvent", createAccountWindowCloseHandler);
					createAccountWindow.alwaysInFront = true;
					this.enabled = false;
				}
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							CHILD CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Detects that a community group should be created. It will call the engine object 
			 *  to service the request.
			 */
			private function createCommunityGroupEventHandler(event:cCreateCommunityGroupEvent):void
			{
				mEngine.createCommunity(event.mCommName, event.mKeywords, mAccountInformation.mUserId);
				
				mLoader.visible = true;
	            mLoader.play();
			}
			
			/**
			 * 	Detects that website statistics data should be fetched from the server. It requests
			 *  this through the engine.
			 */
			private function requestWebsiteStatHandler(event:cWebsiteGraphicClickedEvent):void
			{
				mEngine.getAnalytics(event.mCommGroupId, event.mWebsiteName);
				
				mLoader.visible = true;
            	mLoader.play();
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							ENGINE EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Event handler which signals to the main window that the engine has recieved
			 *  a logged in response from the server.
			 */
			private function loggedInServiceHandler(event:cLoggedinEvent):void
			{
				loggedInMainCanvasInformationUpdate(event.mFullName,
													event.mUserName,
													event.mPassword,
													event.mUserId,
													event.mCommunities);
				mLoggedInCanvas.updateInformation(mAccountInformation);
				mMainViewStack.selectedIndex = 1;
				
	            mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 *  Event handler which signals to the main window that the engine has recieved
			 *  an account created response from the server.
			 */
			private function accountCreatedServiceHandler(event:cLoggedinEvent):void
			{
				loggedInMainCanvasInformationUpdate(event.mFullName,
													event.mUserName,
													event.mPassword,
													event.mUserId,
													event.mCommunities);
				mLoggedInCanvas.updateInformation(mAccountInformation);
				mMainViewStack.selectedIndex = 1; 
				mLoggedInCanvas.openMyCommHomeCanvas();
				
				mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 *	Event handler which signals to the main window that the engine has recieved
			 *  a newly created community group response from the server.
			 */
			private function newCommunityCreatedServiceHandler(event:cNewCommunityEvent):void
			{
				mAccountInformation.mCommunities.addItemAt(event.mCommunityGroupEntry, 0);
				mLoggedInCanvas.updateInformation(mAccountInformation);
				mLoggedInCanvas.openMyCommHomeCanvas();
				
				mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 * 	Event handler which signals to the main window that the engine has recieved
			 *  website statitics data.
			 */
			private function analyticsReadyServiceHandler(event:cAnalysisDataReadyEvent):void
			{
				mLoggedInCanvas.openWebsiteStatsBrowserCanvas(event.mAnalysisParser);
				
				mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 * 	Event handler which signals to the main window that the engine has recieved
			 *  website created event.
			 */
			private function newWebsiteCreatedServiceHandler(event:cNewWebsiteEvent):void
			{				
				/* adds the newly website entry to the appropriate community group entry */
				for(var i:int = 0; i < mAccountInformation.mCommunities.length; i++) {
					var entry:cCommunityGroupEntry = cCommunityGroupEntry(mAccountInformation.mCommunities.getItemAt(i));
					if(entry.mId == mAccountInformation.mSelectedCommunityId) {
						
						entry.mWebsites.addItem(event.mWebsiteEntry);
					}
				}
				mLoggedInCanvas.updateInformation(mAccountInformation);
				mLoggedInCanvas.addWebsiteToCommGroupBrowerCanvas(event.mWebsiteEntry);
				
				mLoader.stop();
	            mLoader.visible = false;
			}
			
			/**
			 * 	Event handler called to signal that a request to the engine has failed.
			 */
			private function failedServiceHandler(event:Event):void
			{
				mLoader.stop();
				mLoader.visible = false;
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						SYSTEM MONITOR EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	System monitor event handler which is notified if the connection to the interned
			 *  becomes brocken. It will notify the user of the event.
			 */
			private function serverConnectionStatusChangeHandler(event:StatusEvent):void
			{
				if(!mURLMonitor.available) {
					mConnectionStatusLabel.text = "Connection Status : Not Connected";
					mConnectionStatusLabel.setStyle("color", "0xFF0000");
					mMainViewStack.enabled = false;
					mConnectedToInternet = false;
					Alert.show("The connection to the server has been broken. Please check your internet " + 
							   "connection and restart the application.", "Connection Error");
				}
				else
				{
					mConnectionStatusLabel.text = "Connection Status : Connected";
					mConnectionStatusLabel.setStyle("color", "0x00FF00");
					mMainViewStack.enabled = true;
					mConnectedToInternet = true;
				}
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							WINDOW EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Event handler triggered when the main window first opens.
			 */
			private function creationCompleteHandler(event:Event):void
			{
				var screenBounds:Rectangle = Screen.mainScreen.bounds;
                nativeWindow.x = (screenBounds.width - nativeWindow.width) / 2;
                nativeWindow.y = (screenBounds.height - nativeWindow.height) / 2;
                
                mLoader.visible = false;
                mLoader.x = (nativeWindow.width - mLoader.width) / 2;
				mLoader.y = (nativeWindow.height - mLoader.height) / 2;
                this.addChild(mLoader); 
                
                var urlRequest:URLRequest = new URLRequest("http://www.google.com");
                mURLMonitor = new URLMonitor(urlRequest);  
                mURLMonitor.pollInterval = 3000;
                mURLMonitor.addEventListener(StatusEvent.STATUS, serverConnectionStatusChangeHandler);
                mURLMonitor.start();
			}
			
			/**
			 * 	Event handler triggered when the main window is about to close.
			 */
			private function closeHandler(event:Event):void
			{
				
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 
			 */
			private function loggedInMainCanvasInformationUpdate(fullName:String,
													   			 userName:String,
													   			 password:String,
													   			 userId:int,
													   			 communities:ArrayCollection):void
			{
				mSignInLabel.visible = false;
				mSignOutButton.visible = true;
				mSeparator2.visible = false;
				mCreateAccountButton.visible = false;
				mUserNameLabel.text = "WELCOME " + fullName
				mAccountInformation = new cAccountInformation(fullName,
															  userName,
															  password,
															  userId,
															  communities);
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// hold user account information
			private var mAccountInformation:cAccountInformation = null;
			// loader used to display a loading status to the user
			private var mLoader:cLoadingIndicator = new cLoadingIndicator();
			// object which monitors internet connection for the application
			private var mURLMonitor:URLMonitor = null;
			// connection status variable
			private var mConnectedToInternet:Boolean = false;
			
		]]>
	</mx:Script>
	
	<mx:HRule width="1013" height="7" strokeColor="#606060" id="mHRule1" horizontalCenter="2" verticalCenter="-286"/>
	<mx:Text text="ADOBE&#xd;" fontSize="20" color="#F70202" textAlign="center" fontWeight="bold" fontFamily="Verdana" width="87" id="mADOBEText" verticalCenter="-330" horizontalCenter="-461"/>
	<mx:Text text="Community Analytics" fontSize="12" color="#1C94B2" id="mCommunityAnalyticsText" verticalCenter="-327" horizontalCenter="-349"/>
	<mx:ViewStack id="mMainViewStack" width="1013" height="625" disabledColor="#373737" horizontalCenter="2" verticalCenter="26">
		<local:cLoggedOutCanvas backgroundColor="#FFFFFF" id="mLoggedOutCanvas">
		</local:cLoggedOutCanvas>
		<local:cLoggedInCanvas id="mLoggedInCanvas" OpenWebsiteCreatorWindowEvent="openWebsiteCreatorWindowHandler(event)" 
													RequestWebsiteStatsEvent="requestWebsiteStatHandler(event)" 
													CreateCommunityGroupEvent="createCommunityGroupEventHandler(event)">
		</local:cLoggedInCanvas>
	</mx:ViewStack>
	<mx:VRule width="3" height="16" id="mSeparator2" verticalCenter="-330" horizontalCenter="427"/>
	<local:cEngine id="mEngine" LoggedInCreatedEvent="loggedInServiceHandler(event)"
							 	AccountCreatedEvent="accountCreatedServiceHandler(event)"
							 	NewCommunityCreatedEvent="newCommunityCreatedServiceHandler(event)"
							  	AnalyticsReadyEvent="analyticsReadyServiceHandler(event)"
							  	FailedEvent="failedServiceHandler(event)"
							  	NewWebsiteCreatedEvent="newWebsiteCreatedServiceHandler(event)" verticalCenter="-354" horizontalCenter="-519">
	</local:cEngine>
	<mx:Label fontSize="12" textAlign="right" width="442" color="#D1C613" id="mUserNameLabel" verticalCenter="-303" horizontalCenter="283"/>
	<mx:Label text="Connection Status : Not Connected" id="mConnectionStatusLabel" color="#FF0000" toolTip="Displays internet connection status" textAlign="left" verticalCenter="-302" horizontalCenter="-404"/>
	<mx:Button label="Create Account" rollOver="createAccountRollOverHandler(event)" rollOut="createAccountRollOutHandler(event)" click="createAccountClickHandler(event)" id="mCreateAccountButton" color="#0CE10C" alpha="0.5" verticalCenter="-329" horizontalCenter="360"/>
	<mx:Button label="Sign In" rollOver="signInRollOverHandler(event)" rollOut="signInRollOutHandler(event)" click="signInClickHandler(event)" id="mSignInLabel" color="#0CE10C" alpha="0.5" verticalCenter="-330" horizontalCenter="471"/>
	<mx:Button rollOver="signOutRollOverHandler(event)" rollOut="signOutRollOutHandler(event)" click="signOutClickHandler(event)" label="Sign Out"  color="#0CE10C" alpha="0.5" id="mSignOutButton" visible="false" horizontalCenter="467" verticalCenter="-330"/>
</mx:WindowedApplication>
