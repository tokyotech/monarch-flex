<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="1012" height="616" creationComplete="initWizard(event)" show="showCanvasHandler(event)">
	<mx:Metadata>
		[Event(name="OpenCommunityGroupSelectionClickedEvent", type="flash.events.Event")]
		[Event(name="OpenCommunityGroupHomeCanvasEvent", type="flash.events.Event")]
		[Event(name="OpenCommunityGroupBrowserCanvasEvent", type="flash.events.Event")]
		[Event(name="OpenWebsiteAdditionalStatBrowserCanvasEvent", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
		
			import mx.core.UIComponent;
			import mx.controls.textClasses.TextRange;
			import mx.controls.Alert;
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// Called when the wizard is added to the stage
			private function initWizard(event:Event):void {
				trace("wizard inited");
				pageLoader = new URLLoader(new URLRequest(urlToLoad));
				pageLoader.addEventListener(Event.COMPLETE, handlePageLoaded);
				html = new HTMLLoader();
				
				mCommunityGroupNameLabel.text = mCommunityGroupName + " >>";
				mWebsiteNameLabel.x =+ mCommunityGroupNameLabel.x + mCommunityGroupNameLabel.measureText(mCommunityGroupNameLabel.text).width + 10;
				mWebsiteNameLabel.text = mWebsiteName + " >>";
				mRexExEditorLabel.x =+ mWebsiteNameLabel.x + mWebsiteNameLabel.measureText(mWebsiteNameLabel.text).width + 10;
			}
			
			/**
			 * 	Called when the canvas is displayed.
			 */
			private function showCanvasHandler(event:Event):void
			{
				// select OpeningScreen canvas by default.
				mMainViewStack.selectedIndex = 0;
				
				mCommunityGroupNameLabel.text = mCommunityGroupName + " >>";
				mWebsiteNameLabel.x =+ mCommunityGroupNameLabel.x + mCommunityGroupNameLabel.measureText(mCommunityGroupNameLabel.text).width + 10;
				mWebsiteNameLabel.text = mWebsiteName + " >>";
				mRexExEditorLabel.x =+ mWebsiteNameLabel.x + mWebsiteNameLabel.measureText(mWebsiteNameLabel.text).width + 10;
			}
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Updates the internal information of this object.
			 */
			public function updateInformation(websiteName:String,
											  communityName:String):void
			{
				mCommunityGroupName = communityName;
				mWebsiteName = websiteName;
			}
		
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							ANDREW'S FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
		
			/**
			 * 	Called when the the mPageSourceText objects is created and shown.
			 */
			private function mPageSourceTextCreationCompleteHandler(event:Event):void
			{
				mPageSourceText.text = urlContents;
			}
		
			private function handlePageLoaded(event:Event):void {
				trace("Page loaded");
				urlContents = pageLoader.data;
				html.loadString(pageLoader.data);
				
			}
			
			// Called when the user clicks the forward button:
			//  advances to the next screen
			private function advanceWizard(event:Event):void {
				if(regexString) {
					regexString.text = "";
				}
				
				if(mMainViewStack.selectedChild == OpeningScreen) {
					mMainViewStack.selectedChild = RegexEntry;
					currState = topLevelRegexes[0];
				}
				else if(mMainViewStack.selectedChild == RegexEntry) {
					// Given current state, either go to next regular expression or 
					//  change to the next canvas in the viewstack
					var index:int = topLevelRegexes.indexOf(currState);
					if(index == topLevelRegexes.length - 1) { // this is last toplevel regex
						trace("last toplevel regex");
						mMainViewStack.selectedChild = pageOfPostsVerify;
					}
					else if(index == -1) { // must be a sub-level regular expression
						trace("must be a sub-level regular expression");
						index = subLevelRegexes.indexOf(currState);
						if(index == subLevelRegexes.length -1) { // this is last sub-level regex
							mMainViewStack.selectedChild = finalView;
						}
						else {
							// Set the regex to be collected to the next in the list
							currState = subLevelRegexes[index + 1];
						}
					}
					else {
						// Set the regex to be collected to the next in the list
						currState = topLevelRegexes[index + 1];
					}	
				}
				else if(mMainViewStack.selectedChild == pageOfPostsVerify) {
					mMainViewStack.selectedChild = RegexEntry;
					currState = subLevelRegexes[0];
					
					// Trigger event that current regex has changed
					dispatchEvent(new Event("regexChanged"));
				}	
				else { // viewstack1.selectedChild == finalView
					// Submit collected regexes to the database
				}	
			}
			
			private function backWizard(event:Event):void {
				if(regexString) {
					regexString.text = "";
				}
				if(mMainViewStack.selectedChild == OpeningScreen) {
				}
				else if(mMainViewStack.selectedChild == RegexEntry) {
					// Given current state, either go to next regular expression or 
					//  change to the next canvas in the viewstack
					var index:int = topLevelRegexes.indexOf(currState);
					if(index == 0) { // this is first toplevel regex
						mMainViewStack.selectedChild = OpeningScreen;
					}
					else if(index == -1) { // must be a sub-level regular expression
						index = subLevelRegexes.indexOf(currState);
						if(index == 0) { // this is first sub-level regex
							mMainViewStack.selectedChild = pageOfPostsVerify;
						}
						else {
							// Set the regex to be collected to the next in the list
							currState = subLevelRegexes[index - 1];
						}
					}
					else {
						// Set the regex to be collected to the next in the list
						currState = topLevelRegexes[index - 1];
					}	
				}
				else if(mMainViewStack.selectedChild == pageOfPostsVerify) {
					mMainViewStack.selectedChild = RegexEntry;
					currState = topLevelRegexes[topLevelRegexes.length-1];
				}	
				else { // viewstack1.selectedChild == finalView
					mMainViewStack.selectedChild = RegexEntry;
					currState = subLevelRegexes[subLevelRegexes.length-1];
				}	
			}
			
			
			private function viewAppearanceHandler(event:Event):void {
				var myComponent:UIComponent  = new UIComponent();  
				myComponent.addChild(html);
				htmlBox.addChild(myComponent);
				html.width = htmlBox.width;
    			html.height = 2880;
			}
			
			private function highlightMatches(event:Event):void {    		
				highlightViewMatches(new RegExp(regexString.text, ""));
				highlightSourceMatches(new RegExp(regexString.text, "g"));
				
			}
			
			private function highlightViewMatches(usrRegex:RegExp):void {
				// Reinitialize match label and match text
	    		matchesText.text = "No captured text";
	    		
	    		// Be sure that we are modifying unhighlighted page	
//				for each(var elem:Object in modifiedElements) {
//					elem.style.background = unmodifiedBackground;
//				}
//	    		
//	    		modifiedElements = new Array();
//	    		
	    		// Begin highlighting matches from root node
	    		trace(html);
	    		highlightMatchesRec(html.window.document.documentElement, usrRegex);
			}
			
			private function highlightMatchesRec(elem:Object, regex:RegExp):void {	
				trace("Element type = " + elem.tagName);
				// trace("Element outerHTML = " + elem.outerHTML);
				// If there is no match within this node, return
				if(elem.outerHTML.search(regex) == -1) {
					return;
				}
				// There is a match so recurse and highlight matches
				else {
					var children:Object = elem.getElementsByTagName("*");
									
					var childHasMatch:Boolean = false;
					for(var i:Number = 0; i < children.length; i++) {
						if(children[i].outerHTML.search(regex) != -1) {
							childHasMatch = true;
							highlightMatchesRec(children[i], regex);
							return; // find only the first match
						}
					}
					
					// If there are no children which match the regex, run the tag-name-based
					// algorithm on nodes having the same tag name as this element
					if(childHasMatch == false) {
						trace("Tag Name = "+elem.tagName);
						highlightMatchesFromList(html.window.document.getElementsByTagName(elem.tagName), regex);
						// elem.style.background = "yellow";
					} 
				}
			}
			
			private function highlightMatchesFromList(elemList:Object, regex:RegExp):void {
				// Save an unmodified background color
				// unmodifiedBackground = elemList[0].style.background;
				
				// Highlight all elements in the element list that match the regular expression
				trace(elemList.length);
				for(var i:Number = 0; i < elemList.length; i++) {
					var match:Object = regex.exec(elemList[i].outerHTML);
					if(match != null) {
						if(match.length >= 2) {
							matchesText.text += ("\n\n* " + match[1]);
						}					
	
						// modifiedElements.push(elemList[i]);
						elemList[i].style.background = "yellow";
						trace("Highlighting "+elemList[i].outerHTML.slice(0,10)+" . . . ");
					}
				}
			}
			
			private function highlightSourceMatches(usrRegex:RegExp):void {
				
				var result:Array = usrRegex.exec(mPageSourceText.text);
				
				while (result != null) {
					// Highlight match
					applyTextHighlight(mPageSourceText, result.index, usrRegex.lastIndex);
	    			// trace("SourceMatches:", result.index, "\t", usrRegex.lastIndex, "\t", result[0].length);
	    			
	    			// Find next match
	    			result = usrRegex.exec(mPageSourceText.text);
				}
			}
			
			private function applyTextHighlight(textField:UIComponent, startIndex:int,
	                              endIndex:int):void
			{
	     		var tr:TextRange = new TextRange(textField, false, startIndex, endIndex);
	    		var highlightedPropsObject:Object = {color:"red", fontWeight:"bold", fontSize:12};
	    		// trace("Highlihting text range from ", startIndex, " to ", endIndex);
	     		setTextFormat(tr, highlightedPropsObject);
			}
	
			private function setTextFormat(tr:TextRange, obj:Object):void{
	    		//loop through the objects properties and assign each value to your TextRange
	    		//instance (only if the instance already has such a property declared)
	    		for(var i:String in obj){
	    			if(tr.hasOwnProperty(i)){
	        			tr[i] = obj[i];
	    			}else{
	        			trace("some error handling here"); 
	        		}
	    		}
	  		}
		
		
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Called when the user clicks on the home label.
			 */
			private function homeLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupHomeCanvasEvent");
				this.dispatchEvent(e);
			}
	
			
			/**
			 * 	Called when the user hovers the mouse over the home label.
			 */
			/*
			private function homeLabelRollOverHandler(event:Event):void
			{
				mHomeLabel.setStyle("color", "0xFF6666");
			}
			*/
			
			/**
			 * 	Called when the user hovers the mouse away from the home label.
			 */
			/*
			private function homeLabelRollOutHandler(event:Event):void
			{
				mHomeLabel.setStyle("color", "0x11d30c");
			}
			*/
			
			/**
			 * 	Called when the user clicks on the community label.
			 */
			private function communityLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupSelectionClickedEvent");
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Called when the user hovers the mouse over the community label.
			 */
			/*
			private function communityLabelRollOverHandler(event:Event):void
			{
				mCommunityGroupLabel.setStyle("color", "0xFF6666");
			}
			*/
			
			/**
			 * 	Called when the user hovers the mouse away from the community label.
			 */
			/*
			private function communityLabelRollOutHandler(event:Event):void
			{
				mCommunityGroupLabel.setStyle("color", "0x11d30c");
			}
			*/
			
			/**
			 * 	Called when the user clicks on the community group name label.
			 */
			private function communityNameLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupBrowserCanvasEvent");
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Called when the user hovers the mouse over the community group name label.
			 */
			/*
			private function communityNameLabelRollOverHandler(event:Event):void
			{
				mCommunityGroupNameLabel.setStyle("color", "0xFF6666");
			}
			*/
			
			/**
			 * 	Called when the user hovers the mouse away from the community group name label.
			 */
			/*
			private function communityNameLabelRollOutHandler(event:Event):void
			{
				mCommunityGroupNameLabel.setStyle("color", "0x11d30c");
			}
			*/
			
			/**
			 * 	Called when the user clicks on the website name label.
			 */
			private function websiteNameLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenWebsiteAdditionalStatBrowserCanvasEvent");
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Called when the user hovers the mouse over the website name label.
			 */
			/*
			private function websiteNameLabelRollOverHandler(event:Event):void
			{
				mWebsiteNameLabel.setStyle("color", "0xFF6666");
			}
			*/
			
			/**
			 * 	Called when the user hovers the mouse away from the website name label.
			 */
			/*
			private function websiteNameLabelRollOutHandler(event:Event):void
			{
				mWebsiteNameLabel.setStyle("color", "0x11d30c");
			}
			*/
			
			/**
			 * 
			 */
			private function exitButtonClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenWebsiteAdditionalStatBrowserCanvasEvent");
				this.dispatchEvent(e);
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			
			// TODO: populate these from the database
			// nextPageOfThreads, threadUrl, threadNumPosts, threadNumViews. Once these are collected, the threadUrl 
			private var topLevelRegexes:Array = new Array("next page of threads", "number of threads in post", 
												  "number of views for thread", "thread url");
			private var usrRegexes:Object = new Object();
			private var subLevelRegexes:Array = new Array("next page of posts", "thread title", "first post author", 
												  "first post time", "first post message", "reply author", "reply time",
												  "reply message", "parent URL for thread");
			[Bindable]
			private var currState:String;
			
			private var pageLoader:URLLoader;
			private var urlToLoad:String="http://reddit.com"; // in application this will be given
			
			[Bindable]
			private var urlContents:String;
			private var html:HTMLLoader;
			
			// name of the community group
			private var mCommunityGroupName:String = "";
			// name of the website 
			private var mWebsiteName:String = "";	
			
		]]>
	</mx:Script>
	<mx:Label x="10" y="17" text="Home" textDecoration="normal" id="mHomeLabel" click="homeLabelClickHandler(event)" styleName="breadCrumb" />
	<mx:Label x="81" y="17" text="My Community Groups" textDecoration="normal" id="mCommunityGroupLabel" click="communityLabelClickHandler(event)" styleName="breadCrumb" />
	<mx:Label x="292" y="17" text=" Group Name" textDecoration="normal" id="mCommunityGroupNameLabel" click="communityNameLabelClickHandler(event)" styleName="breadCrumb" />
	<mx:Label text="Edit Website" click="websiteNameLabelClickHandler(event)" id="mWebsiteNameLabel"  x="446" y="17" styleName="breadCrumb" />
	<mx:Label text="RegEx Editor" id="mRexExEditorLabel"  x="582" y="16" styleName="pageTitle" />
	<mx:Button id="rightButton" skin="@Embed(source='../Images/Knob Forward.png')" click="advanceWizard(event)" horizontalCenter="488" verticalCenter="-284">
	</mx:Button>
	<mx:Button skin="@Embed(source='../Images/Knob Cancel.png')" horizontalCenter="447" verticalCenter="-283" id="mExitButton" click="exitButtonClickHandler(event)">
		<mx:toolTip>Go back to the additional website information page</mx:toolTip>
	</mx:Button>
	<mx:Button skin="@Embed(source='../Images/Knob Left.png')" click="backWizard(event)" horizontalCenter="407" verticalCenter="-284"/>
	
	<mx:ViewStack x="10" y="55" id="mMainViewStack" width="992" height="551">
		<mx:Canvas id="OpeningScreen" width="100%" height="100%">
			<mx:Text text="Welcome to the Adapter Creation Wizard. The following screens will walk you through the creation of a custom plugin. &#xd;Click on the right arrow to continue." width="971.95" textAlign="center" horizontalCenter="-1" verticalCenter="-232" fontSize="12"/>
		</mx:Canvas>
		<mx:Canvas id="RegexEntry" width="100%" height="100%" creationComplete="viewAppearanceHandler(event)" show="viewAppearanceHandler(event)">
			<mx:Text id="infoText" text="Enter a regular expression that matches {currState}:" width="972" height="22" fontSize="12" horizontalCenter="0" verticalCenter="-256"/>
			<mx:TextInput id="regexString" change="highlightMatches(event)"  width="292" horizontalCenter="-340" verticalCenter="-231" borderStyle="solid" borderThickness="0" color="#EFEFEF"/>
			<mx:TabNavigator width="974.95" height="481" horizontalCenter="2" verticalCenter="35">
	    		<mx:Canvas label="View" width="100%" height="100%" color="#EFEFEF">
	    		    <mx:VBox height="449" width="968.95" id="htmlBox" label="Page View"  verticalCenter="-1" horizontalCenter="-2">
	    		    </mx:VBox>
	    		</mx:Canvas>
	    		<mx:VBox label="Source" id="sourceTab" width="100%" height="100%" color="#EFEFEF">
	    		    <mx:TextArea creationComplete="mPageSourceTextCreationCompleteHandler(event)" show="mPageSourceTextCreationCompleteHandler(event)" width="972" height="447" id="mPageSourceText" selectable="true" verticalScrollPolicy="on" editable="false" wordWrap="true"/>
	    		</mx:VBox>
	   		    <mx:HBox label="Text Matches" width="100%" height="100%" color="#EFEFEF">
	    		    <mx:RichTextEditor title="Title" id="matchesText" width="970" height="446" borderStyle="solid" borderThickness="0" cornerRadius="0">
	    		    </mx:RichTextEditor>
	    		</mx:HBox>
			</mx:TabNavigator>
		</mx:Canvas>
		<mx:Canvas id="pageOfPostsVerify" label="" width="100%" height="100%">
			<mx:Canvas width="100%" height="100%" x="-0.05" y="10">
				<mx:TabNavigator width="973" height="483" horizontalCenter="0" verticalCenter="20">
				  		<mx:Canvas label="View" width="100%" height="100%" backgroundColor="#FFFFFF">
				  		  		<mx:HBox color="#F4F4F4">
				  		  			<mx:Label text="Website ;"  width="68" fontSize="12"/>
				  		  			<mx:TextInput id="searchTerms" text="http://reddit.com"  borderStyle="solid" borderThickness="0" width="189"/>
				  		  		</mx:HBox>
				  		</mx:Canvas>
				</mx:TabNavigator>
				<mx:Text x="10" y="10" text="If a &quot;page of posts is shown below click the right arrow. Otherwise revise the &quot;thread url&quot; regular expression in the previous screen." width="972" fontSize="12"/>
			</mx:Canvas>
		</mx:Canvas>
		<mx:Canvas label="" width="100%" height="100%" id="finalView">
			<mx:Text x="10" y="10" text="Select your crawling preferences:" width="441" fontSize="12"/>
			<mx:HBox x="91" y="71" width="100%" height="22">
				<mx:Text text="Minutes to wait between crawls:" width="393" fontSize="12"/>
				<mx:TextInput width="115" text="30.0" borderStyle="solid" borderThickness="0"/>
			</mx:HBox>
			<mx:HBox x="91" y="114" width="100%" height="22">
				<mx:Text text="Number of top-level pages to explore per crawl:" width="393" height="22" fontSize="12"/>
				<mx:TextInput width="115" text="2.0" borderStyle="solid" borderThickness="0"/>
			</mx:HBox>
			<mx:Text x="91" y="178" text="Note: we will do our best to accomodate your crawling preferences. However, please note that we are in possession of only finite resources. As a general guideline, the default values should be suitable for most sites." width="441" fontSize="12"/>
		</mx:Canvas>
	</mx:ViewStack>
	<mx:HRule width="993" height="14.56" verticalCenter="-261" horizontalCenter="0"  />
	<mx:Label x="57" y="16" text="&gt;" styleName="breadCrumbSeparator" />
	<mx:Label x="258" y="16" text="&gt;" styleName="breadCrumbSeparator" />
	<mx:Label x="398" y="16" text="&gt;" styleName="breadCrumbSeparator" />
	<mx:Label x="548" y="12" text="&gt;" styleName="breadCrumbSeparator" />
</mx:Canvas>
